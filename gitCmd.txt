
1. 初始化一个Git仓库，使用git init命令。

2. 添加文件到Git仓库，分两步：

    第一步，使用命令git add ，注意，可反复多次使用，添加多个文件；

    第二步，使用命令git commit，完成。（-m "添加说明"）

3. 要随时掌握工作区的状态，使用git status命令。

4. 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

5.
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

6.工作区和暂存区
1> 工作去就是电脑上看到的目录：如我的工作区是：
	cc@CC-PC:/home/CC/Git/testGit$ ll
	总用量 20
	drwxrwxr-x 3 cc cc 4096  9月 21 09:58 ./
	drwxrwxr-x 3 cc cc 4096  9月 21 09:31 ../
	drwxrwxr-x 8 cc cc 4096  9月 21 09:41 .git/
	-rw-rw-r-- 1 cc cc  773  9月 21 09:58 gitCmd.txt
	-rw-rw-r-- 1 cc cc  760  9月 16 22:43 gitCmd.txt~
2> 工作区有一个隐藏的目录“.git”，这个不算是工作区，而是git的版本库
版本库的的stage或index叫暂存区
git还为我们创建了一个分支master以及一个指向master的指针叫HEAD

向git版本库中添加文件时分为两步：
1> 用git add将文件添加进去，实际上就是将文件的修改添加到暂存区
2> 用git commit提交更改，实际上就是将暂存区的所有内容提交到当前分支master

7.管理修改
git跟踪并管理的是修改，而非文件
git diff ： 是拿暂存区的文件和工作区的文件相比，这个可以查看有没有把修改的文件add到暂存区
git diff HEAD -- 文件名 ：是拿commit的当前版本和工作区的文件相比，这个可以有没有把修改的文件commit到master
两个命令结合是使用可以比较 工作区的文件、  暂存区文件 和 master文件 的不同之处，从而可以辨别：
1> 本地修改的文件有没有add到暂存区中
2> 暂存区中的文件有没有commit到master中

8.撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

9.删除文件
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
